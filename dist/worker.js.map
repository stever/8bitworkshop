{
  "version": 3,
  "sources": ["../../src/worker/shared_vars.ts", "../../src/worker/FileWorkingStore.ts", "../../src/worker/files.ts", "../../src/worker/shared_funcs.ts", "../../src/worker/modules.ts", "../../src/worker/tools/mcpp.ts", "../../src/worker/parsing.ts", "../../src/worker/tools/sdcc.ts", "../../src/worker/tools/z80.ts", "../../src/worker/Builder.ts", "../../src/worker/worker.ts"],
  "sourcesContent": ["declare function importScripts(path: string);\r\n\r\nconst ENVIRONMENT_IS_WEB = typeof window === 'object';\r\nconst ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\r\nexport const emglobal: any = ENVIRONMENT_IS_WORKER ? self : ENVIRONMENT_IS_WEB ? window : global;\r\n\r\nexport const WORKER_RELATIVE_PATH = \"../8bitworker/\";\r\n", "import {FileData, FileEntry, WorkingStore} from \"./defs_files\";\r\n\r\nexport class FileWorkingStore implements WorkingStore {\r\n    workfs: { [path: string]: FileEntry } = {};\r\n    workerseq: number = 0;\r\n    items: {};\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this.workfs = {};\r\n        this.newVersion();\r\n    }\r\n\r\n    currentVersion() {\r\n        return this.workerseq;\r\n    }\r\n\r\n    newVersion() {\r\n        let ts = new Date().getTime();\r\n\r\n        if (ts <= this.workerseq) {\r\n            ts = ++this.workerseq;\r\n        }\r\n\r\n        return ts;\r\n    }\r\n\r\n    putFile(path: string, data: FileData): FileEntry {\r\n        const encoding = (typeof data === 'string') ? 'utf8' : 'binary';\r\n        let entry = this.workfs[path];\r\n\r\n        if (!entry || !compareData(entry.data, data) || entry.encoding != encoding) {\r\n            this.workfs[path] = entry = {\r\n                path: path,\r\n                data: data,\r\n                encoding: encoding,\r\n                ts: this.newVersion()\r\n            };\r\n\r\n            console.log('+++', entry.path, entry.encoding, entry.data.length, entry.ts);\r\n        }\r\n\r\n        return entry;\r\n    }\r\n\r\n    getFileData(path: string): FileData {\r\n        return this.workfs[path] && this.workfs[path].data;\r\n    }\r\n\r\n    getFileAsString(path: string): string {\r\n        let data = this.getFileData(path);\r\n\r\n        if (data != null && typeof data !== 'string') {\r\n            throw new Error(`${path}: expected string`)\r\n        }\r\n\r\n        return data as string;\r\n    }\r\n\r\n    setItem(key: string, value: object) {\r\n        this.items[key] = value;\r\n    }\r\n}\r\n\r\nfunction compareData(a: FileData, b: FileData): boolean {\r\n    if (a.length != b.length) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof a === 'string' && typeof b === 'string') {\r\n        return a == b;\r\n    } else {\r\n        for (let i = 0; i < a.length; i++) {\r\n            if (a[i] != b[i]) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import {WORKER_RELATIVE_PATH} from \"./shared_vars\";\r\nimport {FileWorkingStore} from \"./FileWorkingStore\";\r\nimport {FileData, FileEntry} from \"./defs_files\";\r\nimport {BuildStep} from \"./defs_build\";\r\n\r\nconst fsMeta = {};\r\nconst fsBlob = {};\r\nexport var fileStore = new FileWorkingStore();\r\n\r\nexport function loadFilesystem(name: string) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType = 'blob';\r\n    xhr.open(\"GET\", WORKER_RELATIVE_PATH + \"fs/fs\" + name + \".data\", false);  // synchronous request\r\n    xhr.send(null);\r\n    fsBlob[name] = xhr.response;\r\n\r\n    xhr = new XMLHttpRequest();\r\n    xhr.responseType = 'json';\r\n    xhr.open(\"GET\", WORKER_RELATIVE_PATH + \"fs/fs\" + name + \".js.metadata\", false);  // synchronous request\r\n    xhr.send(null);\r\n    fsMeta[name] = xhr.response;\r\n\r\n    console.log(\"Loaded \" + name + \" filesystem\", fsMeta[name].files.length, 'files', fsBlob[name].size, 'bytes');\r\n}\r\n\r\nexport function fsLoaded(name: string) {\r\n    return fsMeta.hasOwnProperty(name);\r\n}\r\n\r\n// mount the filesystem at /share\r\nexport function setupFS(FS, name: string) {\r\n    const WORKERFS = FS.filesystems['WORKERFS'];\r\n\r\n    if (!fsMeta[name]) {\r\n        throw Error(\"No filesystem for '\" + name + \"'\");\r\n    }\r\n\r\n    FS.mkdir('/share');\r\n    FS.mount(WORKERFS, {\r\n        packages: [{metadata: fsMeta[name], blob: fsBlob[name]}]\r\n    }, '/share');\r\n\r\n    // fix for slow Blob operations by caching typed arrays\r\n    // https://github.com/kripken/emscripten/blob/incoming/src/library_workerfs.js\r\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=349304#c30\r\n\r\n    const reader = WORKERFS.reader;\r\n    const blobcache = {};\r\n\r\n    WORKERFS.stream_ops.read = function (stream, buffer, offset, length, position) {\r\n        if (position >= stream.node.size) {\r\n            return 0;\r\n        }\r\n\r\n        let contents = blobcache[stream.path];\r\n        if (!contents) {\r\n            // noinspection JSVoidFunctionReturnValueUsed\r\n            const ab = reader.readAsArrayBuffer(stream.node.contents);\r\n            contents = blobcache[stream.path] = new Uint8Array(ab);\r\n        }\r\n\r\n        if (position + length > contents.length) {\r\n            length = contents.length - position;\r\n        }\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            buffer[offset + i] = contents[position + i];\r\n        }\r\n\r\n        return length;\r\n    };\r\n}\r\n\r\nexport function putWorkFile(path: string, data: FileData) {\r\n    return fileStore.putFile(path, data);\r\n}\r\n\r\nexport function getWorkFileAsString(path: string): string {\r\n    return fileStore.getFileAsString(path);\r\n}\r\n\r\nfunction populateEntry(fs, path: string, entry: FileEntry) {\r\n    let data = entry.data;\r\n\r\n    // create subfolders\r\n    const toks = path.split('/');\r\n    if (toks.length > 1) {\r\n        for (let i = 0; i < toks.length - 1; i++) {\r\n            try {\r\n                fs.mkdir(toks[i]);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    // write file\r\n    fs.writeFile(path, data, {encoding: entry.encoding});\r\n    const time = new Date(entry.ts).getTime();\r\n    fs.utime(path, time, time);\r\n    console.log(\"<<<\", path, entry.data.length);\r\n}\r\n\r\n// can call multiple times (from populateFiles)\r\nexport function gatherFiles(step: BuildStep): number {\r\n    let maxts = 0;\r\n    if (step.files) {\r\n        for (let i = 0; i < step.files.length; i++) {\r\n            const path = step.files[i];\r\n            const entry = fileStore.workfs[path];\r\n\r\n            if (!entry) {\r\n                throw new Error(\"No entry for path '\" + path + \"'\");\r\n            } else {\r\n                maxts = Math.max(maxts, entry.ts);\r\n            }\r\n        }\r\n    } else if (step.path) {\r\n        const path = step.path;\r\n        const entry = fileStore.workfs[path];\r\n        maxts = entry.ts;\r\n        step.files = [path];\r\n    }\r\n\r\n    if (step.path && !step.prefix) {\r\n        step.prefix = getPrefix(step.path);\r\n    }\r\n\r\n    step.maxts = maxts;\r\n    return maxts;\r\n}\r\n\r\nfunction getPrefix(s: string): string {\r\n    const pos = s.lastIndexOf('.');\r\n    return (pos > 0) ? s.substring(0, pos) : s;\r\n}\r\n\r\nexport function populateFiles(step: BuildStep, fs) {\r\n    gatherFiles(step);\r\n\r\n    if (!step.files) {\r\n        throw Error(\"call gatherFiles() first\");\r\n    }\r\n\r\n    for (let i = 0; i < step.files.length; i++) {\r\n        const path = step.files[i];\r\n        populateEntry(fs, path, fileStore.workfs[path]);\r\n    }\r\n}\r\n\r\nexport function populateExtraFiles(step: BuildStep, fs, extrafiles) {\r\n    if (extrafiles) {\r\n        for (let i = 0; i < extrafiles.length; i++) {\r\n            const xfn = extrafiles[i];\r\n\r\n            // is this file cached?\r\n            if (fileStore.workfs[xfn]) {\r\n                fs.writeFile(xfn, fileStore.workfs[xfn].data, {encoding: 'binary'});\r\n                continue;\r\n            }\r\n\r\n            // fetch from network\r\n            const xpath = \"zx/\" + xfn;\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.responseType = 'arraybuffer';\r\n            xhr.open(\"GET\", WORKER_RELATIVE_PATH + xpath, false);  // synchronous request\r\n            xhr.send(null);\r\n\r\n            if (xhr.response && xhr.status == 200) {\r\n                const data = new Uint8Array(xhr.response);\r\n                fs.writeFile(xfn, data, {encoding: 'binary'});\r\n                putWorkFile(xfn, data);\r\n                console.log(\":::\", xfn, data.length);\r\n            } else {\r\n                throw Error(\"Could not load extra file \" + xpath);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function staleFiles(step: BuildStep, targets: string[]) {\r\n    if (!step.maxts) {\r\n        throw Error(\"call populateFiles() first\");\r\n    }\r\n\r\n    // see if any target files are more recent than inputs\r\n    for (let i = 0; i < targets.length; i++) {\r\n        const entry = fileStore.workfs[targets[i]];\r\n        if (!entry || step.maxts > entry.ts) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    console.log(\"unchanged\", step.maxts, targets);\r\n    return false;\r\n}\r\n\r\nexport function anyTargetChanged(step: BuildStep, targets: string[]) {\r\n    if (!step.maxts) {\r\n        throw Error(\"call populateFiles() first\");\r\n    }\r\n\r\n    // see if any target files are more recent than inputs\r\n    for (let i = 0; i < targets.length; i++) {\r\n        const entry = fileStore.workfs[targets[i]];\r\n        if (!entry || entry.ts > step.maxts) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    console.log(\"unchanged\", step.maxts, targets);\r\n    return false;\r\n}\r\n", "import {WorkerError, WorkerErrorResult} from \"./defs_build_result\";\r\n\r\nexport function errorResult(msg: string): WorkerErrorResult {\r\n    return {errors: [{line: 0, msg: msg}]};\r\n}\r\n\r\nexport function print_fn(s: string) {\r\n    console.log(s);\r\n}\r\n\r\nexport function makeErrorMatcher(\r\n    errors: WorkerError[],\r\n    regex,\r\n    iline: number,\r\n    imsg: number,\r\n    mainpath: string,\r\n    ifilename?: number) {\r\n\r\n    return function (s) {\r\n        const matches = regex.exec(s);\r\n        if (matches) {\r\n            errors.push({\r\n                line: parseInt(matches[iline]) || 1,\r\n                msg: matches[imsg],\r\n                path: ifilename ? matches[ifilename] : mainpath\r\n            });\r\n        } else {\r\n            console.log(\"??? \" + s);\r\n        }\r\n    }\r\n}\r\n", "import {WORKER_RELATIVE_PATH} from \"./shared_vars\";\r\n\r\n/// <reference types=\"emscripten\" />\r\nexport interface EmscriptenModule {\r\n    callMain?: (args: string[]) => void\r\n    FS: any\r\n}\r\n\r\ndeclare function importScripts(path: string);\r\n\r\nconst wasmModuleCache = {};\r\nconst wasmBlob = {};\r\nconst loaded = {};\r\n\r\nfunction getWASMModule(module_id: string) {\r\n    let module = wasmModuleCache[module_id];\r\n\r\n    if (!module) {\r\n        module = new WebAssembly.Module(wasmBlob[module_id]);\r\n        wasmModuleCache[module_id] = module;\r\n        delete wasmBlob[module_id];\r\n    }\r\n\r\n    return module;\r\n}\r\n\r\nexport function instantiateWASM(module_id: string) {\r\n    return function (imports, ri) {\r\n        const mod = getWASMModule(module_id);\r\n        const inst = new WebAssembly.Instance(mod, imports);\r\n        ri(inst);\r\n        return inst.exports;\r\n    }\r\n}\r\n\r\nexport function loadWASM(modulename: string, debug?: boolean) {\r\n    if (!loaded[modulename]) {\r\n        importScripts(WORKER_RELATIVE_PATH + \"wasm/\" + modulename + (debug ? \".\" + debug + \".js\" : \".js\"));\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.open(\"GET\", WORKER_RELATIVE_PATH + \"wasm/\" + modulename + \".wasm\", false);  // synchronous request\r\n        xhr.send(null);\r\n\r\n        if (xhr.response) {\r\n            wasmBlob[modulename] = new Uint8Array(xhr.response);\r\n            console.log(\"Loaded \" + modulename + \".wasm (\" + wasmBlob[modulename].length + \" bytes)\");\r\n            loaded[modulename] = 1;\r\n        } else {\r\n            throw Error(\"Could not load WASM file \" + modulename + \".wasm\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function loadASMJS(modulename: string, debug?: boolean) {\r\n    if (!loaded[modulename]) {\r\n        importScripts(WORKER_RELATIVE_PATH + 'asmjs/' + modulename + (debug ? \".\" + debug + \".js\" : \".js\"));\r\n        loaded[modulename] = 1;\r\n    }\r\n}\r\n", "import {EmscriptenModule, loadASMJS} from \"../modules\";\r\nimport {emglobal} from \"../shared_vars\";\r\nimport {populateFiles, setupFS} from \"../files\";\r\nimport {errorResult, makeErrorMatcher, print_fn} from \"../shared_funcs\";\r\nimport {BuildStep} from \"../defs_build\";\r\n\r\nexport function preprocessMCPP(step: BuildStep, filesys: string) {\r\n    loadASMJS(\"mcpp\");\r\n\r\n    // <stdin>:2: error: Can't open include file \"foo.h\"\r\n    let errors = [];\r\n    const match_fn = makeErrorMatcher(errors, /<stdin>:(\\d+): (.+)/, 1, 2, step.path);\r\n    const MCPP: EmscriptenModule = emglobal.mcpp({\r\n        noInitialRun: true,\r\n        noFSInit: true,\r\n        print: print_fn,\r\n        printErr: match_fn,\r\n    });\r\n\r\n    const FS = MCPP.FS;\r\n\r\n    if (filesys) {\r\n        setupFS(FS, filesys);\r\n    }\r\n\r\n    populateFiles(step, FS);\r\n\r\n    const args = [\r\n        \"-D\", \"__8BITWORKSHOP__\",\r\n        \"-D\", \"__SDCC_z80\",\r\n        \"-D\", \"ZX\",\r\n        \"-I\", \"/share/include\",\r\n        \"-Q\",\r\n        step.path, \"main.i\"\r\n    ];\r\n\r\n    if (step.mainfile) {\r\n        args.unshift.apply(args, [\"-D\", \"__MAIN__\"]);\r\n    }\r\n\r\n    MCPP.callMain(args);\r\n\r\n    if (errors.length) {\r\n        return {errors};\r\n    }\r\n\r\n    let iout = FS.readFile(\"main.i\", {encoding: 'utf8'});\r\n    iout = iout.replace(/^#line /gm, '\\n# ');\r\n\r\n    try {\r\n        const errout = FS.readFile(\"mcpp.err\", {encoding: 'utf8'});\r\n        if (errout.length) {\r\n\r\n            // //main.c:2: error: Can't open include file \"stdiosd.h\"\r\n            errors = extractErrors(/([^:]+):(\\d+): (.+)/, errout.split(\"\\n\"), step.path, 2, 3, 1);\r\n            if (errors.length == 0) {\r\n                errors = errorResult(errout).errors;\r\n            }\r\n\r\n            return {errors};\r\n        }\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n\r\n    return {code: iout};\r\n}\r\n\r\nfunction extractErrors(regex, strings: string[], path: string, iline, imsg, ifilename) {\r\n    const errors = [];\r\n    const matcher = makeErrorMatcher(errors, regex, iline, imsg, path, ifilename);\r\n\r\n    for (let i = 0; i < strings.length; i++) {\r\n        matcher(strings[i]);\r\n    }\r\n\r\n    return errors;\r\n}\r\n", "import {SourceSnippet} from \"./defs_build_result\";\r\n\r\nconst re_crlf = /\\r?\\n/;\r\nconst re_lineoffset = /\\s*(\\d+)\\s+[%]line\\s+(\\d+)\\+(\\d+)\\s+(.+)/;\r\n\r\nexport function parseListing(code: string,\r\n                             lineMatch,\r\n                             iline: number,\r\n                             ioffset: number,\r\n                             iinsns: number,\r\n                             icycles?: number,\r\n                             funcMatch?, segMatch?): SourceSnippet[] {\r\n\r\n    const lines: SourceSnippet[] = [];\r\n\r\n    let lineofs = 0;\r\n    let segment = '';\r\n    let func = '';\r\n    let funcbase = 0;\r\n\r\n    code.split(re_crlf).forEach((line, lineindex) => {\r\n        let segm = segMatch && segMatch.exec(line);\r\n        if (segm) {\r\n            segment = segm[1];\r\n        }\r\n\r\n        let funcm = funcMatch && funcMatch.exec(line);\r\n        if (funcm) {\r\n            funcbase = parseInt(funcm[1], 16);\r\n            func = funcm[2];\r\n        }\r\n\r\n        const linem = lineMatch.exec(line);\r\n        if (linem && linem[1]) {\r\n            const linenum = iline < 0 ? lineindex : parseInt(linem[iline]);\r\n            const offset = parseInt(linem[ioffset], 16);\r\n            const insns = linem[iinsns];\r\n            const cycles: number = icycles ? parseInt(linem[icycles]) : null;\r\n            const iscode = cycles > 0;\r\n\r\n            if (insns) {\r\n                lines.push({\r\n                    line: linenum + lineofs,\r\n                    offset: offset - funcbase,\r\n                    insns,\r\n                    cycles,\r\n                    iscode,\r\n                    segment,\r\n                    func\r\n                });\r\n            }\r\n        } else {\r\n            let m = re_lineoffset.exec(line);\r\n            if (m) {\r\n                lineofs = parseInt(m[2]) - parseInt(m[1]) - parseInt(m[3]);\r\n            }\r\n        }\r\n    });\r\n\r\n    return lines;\r\n}\r\n\r\nexport function parseSourceLines(code: string, lineMatch, offsetMatch, funcMatch?, segMatch?) {\r\n    const lines = [];\r\n\r\n    let lastlinenum = 0;\r\n    let segment = '';\r\n    let func = '';\r\n    let funcbase = 0;\r\n\r\n    for (let line of code.split(re_crlf)) {\r\n        let segm = segMatch && segMatch.exec(line);\r\n        if (segm) {\r\n            segment = segm[1];\r\n        }\r\n\r\n        let funcm = funcMatch && funcMatch.exec(line);\r\n        if (funcm) {\r\n            funcbase = parseInt(funcm[1], 16);\r\n            func = funcm[2];\r\n        }\r\n\r\n        let linem = lineMatch.exec(line);\r\n        if (linem && linem[1]) {\r\n            lastlinenum = parseInt(linem[1]);\r\n        } else if (lastlinenum) {\r\n            linem = offsetMatch.exec(line);\r\n            if (linem && linem[1]) {\r\n                const offset = parseInt(linem[1], 16);\r\n\r\n                lines.push({\r\n                    line: lastlinenum,\r\n                    offset: offset - funcbase,\r\n                    segment,\r\n                    func\r\n                });\r\n\r\n                lastlinenum = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    return lines;\r\n}\r\n", "import {\n    anyTargetChanged,\n    gatherFiles,\n    getWorkFileAsString,\n    populateExtraFiles,\n    populateFiles,\n    putWorkFile,\n    staleFiles\n} from \"../files\";\nimport {emglobal} from \"../shared_vars\";\nimport {EmscriptenModule, loadWASM, instantiateWASM} from \"../modules\";\nimport {setupFS} from \"../files\";\nimport {preprocessMCPP} from \"./mcpp\";\nimport {parseListing, parseSourceLines} from \"../parsing\";\nimport {print_fn} from \"../shared_funcs\";\nimport {BuildStep} from \"../defs_build\";\nimport {BuildStepResult, CodeListingMap, WorkerError} from \"../defs_build_result\";\n\nfunction hexToArray(s, ofs) {\n    const buf = new ArrayBuffer(s.length / 2);\n    const arr = new Uint8Array(buf);\n\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = parseInt(s.slice(i * 2 + ofs, i * 2 + ofs + 2), 16);\n    }\n\n    return arr;\n}\n\nfunction parseIHX(ihx, rom_start, rom_size) {\n    const output = new Uint8Array(new ArrayBuffer(rom_size));\n    let high_size = 0;\n\n    for (let s of ihx.split(\"\\n\")) {\n        if (s[0] == ':') {\n            const arr = hexToArray(s, 1);\n            const count = arr[0];\n            const address = (arr[1] << 8) + arr[2] - rom_start;\n            const rectype = arr[3];\n            //console.log(rectype, address.toString(16), count, arr);\n\n            if (rectype == 0) {\n                let i;\n\n                for (i = 0; i < count; i++) {\n                    output[i + address] = arr[4 + i];\n                }\n\n                if (i + address > high_size) {\n                    high_size = i + address;\n                }\n            } else if (rectype == 1) {\n                break;\n            } else {\n                console.log(s); // unknown record type\n            }\n        }\n    }\n\n    return output;\n}\n\nexport function assembleSDASZ80(step: BuildStep): BuildStepResult {\n    loadWASM(\"sdasz80\");\n\n    let objout, lstout;\n    const errors = [];\n\n    gatherFiles(step);\n\n    const objpath = step.prefix + \".rel\";\n    const lstpath = step.prefix + \".lst\";\n\n    if (staleFiles(step, [objpath, lstpath])) {\n        //?ASxxxx-Error-<o> in line 1 of main.asm null\n        //              <o> .org in REL area or directive / mnemonic error\n        // ?ASxxxx-Error-<q> in line 1627 of cosmic.asm\n        //    <q> missing or improper operators, terminators, or delimiters\n        const match_asm_re1 = / in line (\\d+) of (\\S+)/;\n        const match_asm_re2 = / <\\w> (.+)/;\n        let errline = 0;\n        let errpath = step.path;\n\n        const match_asm_fn = (s: string) => {\n            let m = match_asm_re1.exec(s);\n            if (m) {\n                errline = parseInt(m[1]);\n                errpath = m[2];\n            } else {\n                m = match_asm_re2.exec(s);\n                if (m) {\n                    errors.push({\n                        line: errline,\n                        path: errpath,\n                        msg: m[1]\n                    });\n                }\n            }\n        }\n\n        const ASZ80: EmscriptenModule = emglobal.sdasz80({\n            instantiateWasm: instantiateWASM('sdasz80'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: match_asm_fn,\n            printErr: match_asm_fn,\n        });\n\n        const FS = ASZ80.FS;\n\n        populateFiles(step, FS);\n\n        ASZ80.callMain(['-plosgffwy', step.path]);\n\n        if (errors.length) {\n            return {errors: errors};\n        }\n\n        objout = FS.readFile(objpath, {encoding: 'utf8'});\n        lstout = FS.readFile(lstpath, {encoding: 'utf8'});\n\n        putWorkFile(objpath, objout);\n        putWorkFile(lstpath, lstout);\n    }\n\n    return {\n        linktool: \"sdldz80\",\n        files: [objpath, lstpath],\n        args: [objpath]\n    };\n}\n\nexport function linkSDLDZ80(step: BuildStep) {\n    loadWASM(\"sdldz80\");\n\n    const errors = [];\n\n    gatherFiles(step);\n\n    const binpath = \"main.ihx\";\n\n    if (staleFiles(step, [binpath])) {\n        const match_aslink_re = /\\?ASlink-(\\w+)-(.+)/;\n\n        const match_aslink_fn = (s: string) => {\n            const matches = match_aslink_re.exec(s);\n            if (matches) {\n                errors.push({\n                    line: 0,\n                    msg: matches[2]\n                });\n            }\n        }\n\n        const params = step.params;\n\n        const LDZ80: EmscriptenModule = emglobal.sdldz80({\n            instantiateWasm: instantiateWASM('sdldz80'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: match_aslink_fn,\n            printErr: match_aslink_fn,\n        } as BuildStep);\n\n        const FS = LDZ80.FS;\n\n        setupFS(FS, 'sdcc');\n        populateFiles(step, FS);\n        populateExtraFiles(step, FS, params.extra_link_files);\n\n        const args = [\n            '-mjwxyu',\n            '-i', 'main.ihx',\n            '-b', '_CODE=0x' + params.code_start.toString(16),\n            '-b', '_DATA=0x' + params.data_start.toString(16),\n            '-k', '/share/lib/z80',\n            '-l', 'z80'\n        ];\n\n        if (params.extra_link_args) {\n            args.push.apply(args, params.extra_link_args);\n        }\n\n        args.push.apply(args, step.args);\n        //console.log(args);\n\n        LDZ80.callMain(args);\n\n        if (errors.length) {\n            return {errors};\n        }\n\n        const hexout = FS.readFile(\"main.ihx\", {encoding: 'utf8'});\n        const noiout = FS.readFile(\"main.noi\", {encoding: 'utf8'});\n\n        putWorkFile(\"main.ihx\", hexout);\n        putWorkFile(\"main.noi\", noiout);\n\n        // return unchanged if no files changed\n        if (!anyTargetChanged(step, [\"main.ihx\", \"main.noi\"])) {\n            return;\n        }\n\n        // parse binary file\n        const binout = parseIHX(\n            hexout,\n            params.code_start,\n            params.rom_size);\n\n        // parse listings\n        const listings: CodeListingMap = {};\n        for (let fn of step.files) {\n            if (fn.endsWith('.lst')) {\n                const rstout = FS.readFile(fn.replace('.lst', '.rst'), {encoding: 'utf8'});\n                //   0000 21 02 00      [10]   52 \tld\thl, #2\n                const asmlines = parseListing(rstout, /^\\s*([0-9A-F]{4})\\s+([0-9A-F][0-9A-F r]*[0-9A-F])\\s+\\[([0-9 ]+)\\]?\\s+(\\d+) (.*)/i, 4, 1, 2, 3);\n                const srclines = parseSourceLines(rstout, /^\\s+\\d+ ;<stdin>:(\\d+):/i, /^\\s*([0-9A-F]{4})/i);\n                putWorkFile(fn, rstout);\n                listings[fn] = {\n                    asmlines: srclines.length ? asmlines : null,\n                    lines: srclines.length ? srclines : asmlines,\n                    text: rstout\n                };\n            }\n        }\n\n        // parse symbol map\n        const symbolmap = {};\n        for (let s of noiout.split(\"\\n\")) {\n            const toks = s.split(\" \");\n            if (toks[0] == 'DEF' && !toks[1].startsWith(\"A$\")) {\n                symbolmap[toks[1]] = parseInt(toks[2], 16);\n            }\n        }\n\n        // build segment map\n        const seg_re = /^s__(\\w+)$/;\n        const segments = [];\n        for (let ident in symbolmap) {\n            let m = seg_re.exec(ident);\n\n            if (m) {\n                let seg = m[1];\n                let segstart = symbolmap[ident]; // s__SEG\n                let segsize = symbolmap['l__' + seg]; // l__SEG\n\n                if (segstart >= 0 && segsize > 0) {\n                    let type = null;\n\n                    if (['INITIALIZER', 'GSINIT', 'GSFINAL'].includes(seg)) {\n                        type = 'rom';\n                    } else if (seg.startsWith('CODE')) {\n                        type = 'rom';\n                    } else if (['DATA', 'INITIALIZED'].includes(seg)) {\n                        type = 'ram';\n                    }\n\n                    if (type == 'rom' || segstart > 0) { // ignore HEADER0, CABS0, etc\n                        segments.push({\n                            name: seg,\n                            start: segstart,\n                            size: segsize,\n                            type: type\n                        });\n                    }\n                }\n            }\n        }\n\n        return {\n            output: binout,\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap,\n            segments: segments\n        };\n    }\n}\n\nexport function compileSDCC(step: BuildStep): BuildStepResult {\n    gatherFiles(step);\n\n    const outpath = step.prefix + \".asm\";\n    if (staleFiles(step, [outpath])) {\n        const errors = [];\n\n        loadWASM('sdcc');\n\n        const SDCC: EmscriptenModule = emglobal.sdcc({\n            instantiateWasm: instantiateWASM('sdcc'),\n            noInitialRun: true,\n            noFSInit: true,\n            print: print_fn,\n            printErr: msvcErrorMatcher(errors),\n            //TOTAL_MEMORY:256*1024*1024,\n        });\n\n        const FS = SDCC.FS;\n\n        populateFiles(step, FS);\n\n        // load source file and preprocess\n        let code = getWorkFileAsString(step.path);\n        const preproc = preprocessMCPP(step, 'sdcc');\n        if (preproc.errors) {\n            return {errors: preproc.errors};\n        } else {\n            code = preproc.code;\n        }\n\n        // pipe file to stdin\n        setupStdin(FS, code);\n        setupFS(FS, 'sdcc');\n\n        const args = [\n            '--vc',\n            '--std-sdcc99',\n            '-mz80',\n            //'-Wall',\n            '--c1mode',\n            //'--debug',\n            //'-S', 'main.c',\n            //'--asm=sdasz80',\n            //'--reserve-regs-iy',\n            '--less-pedantic',\n            ///'--fomit-frame-pointer',\n            //'--opt-code-speed',\n            //'--max-allocs-per-node', '1000',\n            //'--cyclomatic',\n            //'--nooverlay',\n            //'--nogcse',\n            //'--nolabelopt',\n            //'--noinvariant',\n            //'--noinduction',\n            //'--nojtbound',\n            //'--noloopreverse',\n            '-o', outpath\n        ];\n\n        // if \"#pragma opt_code\" found do not disable optimziations\n        if (!/^\\s*#pragma\\s+opt_code/m.exec(code)) {\n            args.push.apply(args, [\n                '--oldralloc',\n                '--no-peep',\n                '--nolospre'\n            ]);\n        }\n\n        SDCC.callMain(args);\n\n        if (errors.length /* && nwarnings < msvc_errors.length*/) {\n            return {errors: errors};\n        }\n\n        // massage the asm output\n        const asmout =\n            \" .area _HOME\\n\" +\n            \" .area _CODE\\n\" +\n            \" .area _INITIALIZER\\n\" +\n            \" .area _DATA\\n\" +\n            \" .area _INITIALIZED\\n\" +\n            \" .area _BSEG\\n\" +\n            \" .area _BSS\\n\" +\n            \" .area _HEAP\\n\" + FS.readFile(outpath, {encoding: 'utf8'});\n\n        putWorkFile(outpath, asmout);\n    }\n\n    return {\n        nexttool: \"sdasz80\",\n        path: outpath,\n        args: [outpath],\n        files: [outpath],\n    };\n}\n\nfunction setupStdin(fs, code: string) {\n    let i = 0;\n    fs.init(\n        function () {\n            return i < code.length ? code.charCodeAt(i++) : null;\n        }\n    );\n}\n\n// test.c(6) : warning 85: in function main unreferenced local variable : 'x'\n// main.a (4): error: Unknown Mnemonic 'xxx'.\n// at 2: warning 190: ISO C forbids an empty source file\nconst re_msvc = /[/]*([^( ]+)\\s*[(](\\d+)[)]\\s*:\\s*(.+?):\\s*(.*)/;\nconst re_msvc2 = /\\s*(at)\\s+(\\d+)\\s*(:)\\s*(.*)/;\n\nfunction msvcErrorMatcher(errors: WorkerError[]) {\n    return function (s: string) {\n        const matches = re_msvc.exec(s) || re_msvc2.exec(s);\n        if (matches) {\n            const errline = parseInt(matches[2]);\n            errors.push({\n                line: errline,\n                path: matches[1],\n                msg: matches[4]\n            });\n        } else {\n            console.log(s);\n        }\n    }\n}\n", "import {\n    anyTargetChanged,\n    gatherFiles,\n    populateFiles,\n    putWorkFile,\n    staleFiles\n} from \"../files\";\nimport {emglobal} from \"../shared_vars\";\nimport {EmscriptenModule, loadWASM, instantiateWASM} from \"../modules\";\nimport {parseListing} from \"../parsing\";\nimport {print_fn, makeErrorMatcher} from \"../shared_funcs\";\nimport {BuildStep} from \"../defs_build\";\nimport {BuildStepResult, CodeListingMap} from \"../defs_build_result\";\n\nexport function assembleZMAC(step: BuildStep): BuildStepResult {\n    loadWASM(\"zmac\");\n\n    let lstout, binout;\n    const errors = [];\n\n    gatherFiles(step);\n\n    const lstpath = step.prefix + \".lst\";\n    const binpath = step.prefix + \".cim\";\n\n    if (staleFiles(step, [binpath, lstpath])) {\n        const ZMAC: EmscriptenModule = emglobal.zmac({\n            instantiateWasm: instantiateWASM('zmac'),\n            noInitialRun: true,\n            //logReadFiles:true,\n            print: print_fn,\n            printErr: makeErrorMatcher(errors, /([^( ]+)\\s*[(](\\d+)[)]\\s*:\\s*(.+)/, 2, 3, step.path),\n        });\n\n        const FS = ZMAC.FS;\n        populateFiles(step, FS);\n        ZMAC.callMain(['-z', '-c', '--oo', 'lst,cim', step.path]);\n\n        if (errors.length) {\n            return {errors: errors};\n        }\n\n        lstout = FS.readFile(\"zout/\" + lstpath, {encoding: 'utf8'});\n        binout = FS.readFile(\"zout/\" + binpath, {encoding: 'binary'});\n\n        putWorkFile(binpath, binout);\n        putWorkFile(lstpath, lstout);\n\n        if (!anyTargetChanged(step, [binpath, lstpath])) {\n            return;\n        }\n\n        //  230: 1739+7+x   017A  1600      L017A: LD      D,00h\n        const lines = parseListing(lstout, /\\s*(\\d+):\\s*([0-9a-f]+)\\s+([0-9a-f]+)\\s+(.+)/i, 1, 2, 3);\n        const listings: CodeListingMap = {};\n        listings[lstpath] = {lines: lines};\n\n        // parse symbol table\n        const symbolmap = {};\n        const sympos = lstout.indexOf('Symbol Table:');\n        if (sympos > 0) {\n            const symout = lstout.slice(sympos + 14);\n            symout.split('\\n').forEach(function (l) {\n                const m = l.match(/(\\S+)\\s+([= ]*)([0-9a-f]+)/i);\n                if (m) {\n                    symbolmap[m[1]] = parseInt(m[3], 16);\n                }\n            });\n        }\n\n        return {\n            output: binout,\n            listings: listings,\n            errors: errors,\n            symbolmap: symbolmap\n        };\n    }\n}\n", "import {fileStore} from \"./files\";\r\nimport {errorResult} from \"./shared_funcs\";\r\nimport * as sdcc from \"./tools/sdcc\";\r\nimport * as z80 from \"./tools/z80\";\r\nimport {BuildStep, PlatformParams, WorkerMessage} from \"./defs_build\";\r\nimport {WorkerError, WorkerResult} from \"./defs_build_result\";\r\n\r\nconst TOOLS = {\r\n    'sdasz80': sdcc.assembleSDASZ80,\r\n    'sdldz80': sdcc.linkSDLDZ80,\r\n    'sdcc': sdcc.compileSDCC,\r\n    'zmac': z80.assembleZMAC,\r\n};\r\n\r\nconst PLATFORM_PARAMS = {\r\n    arch: 'z80',\r\n    code_start: 0x8000,\r\n    rom_size: 0xff58 - 0x8000,\r\n    data_start: 0xf000,\r\n    data_size: 0xfe00 - 0xf000,\r\n    stack_end: 0xff58,\r\n    extra_link_args: ['crt0.rel'],\r\n    extra_link_files: ['crt0.rel', 'crt0.lst']\r\n} as PlatformParams;\r\n\r\nexport class Builder {\r\n    steps: BuildStep[] = [];\r\n    startseq: number = 0;\r\n\r\n    async executeBuildSteps(): Promise<WorkerResult> {\r\n        this.startseq = fileStore.currentVersion();\r\n\r\n        let linkstep: BuildStep = null;\r\n\r\n        while (this.steps.length) {\r\n            const step = this.steps.shift(); // get top of array\r\n            const toolfn = TOOLS[step.tool];\r\n\r\n            if (!toolfn) {\r\n                throw Error(\"no tool named \" + step.tool);\r\n            }\r\n\r\n            step.params = PLATFORM_PARAMS;\r\n\r\n            try {\r\n                step.result = await toolfn(step);\r\n            } catch (e) {\r\n                console.log(\"EXCEPTION\", e, e.stack);\r\n                return errorResult(`${e}`);\r\n            }\r\n\r\n            if (step.result) {\r\n                (step.result as any).params = step.params;\r\n\r\n                // errors? return them\r\n                if ('errors' in step.result && step.result.errors.length) {\r\n                    applyDefaultErrorPath(step.result.errors, step.path);\r\n                    return step.result;\r\n                }\r\n\r\n                // if we got some output, return it immediately\r\n                if ('output' in step.result && step.result.output) {\r\n                    return step.result;\r\n                }\r\n\r\n                // combine files with a link tool?\r\n                if ('linktool' in step.result) {\r\n                    if (linkstep) {\r\n                        linkstep.files = linkstep.files.concat(step.result.files);\r\n                        linkstep.args = linkstep.args.concat(step.result.args);\r\n                    } else {\r\n                        linkstep = {\r\n                            tool: step.result.linktool,\r\n                            files: step.result.files,\r\n                            args: step.result.args\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // process with another tool?\r\n                if ('nexttool' in step.result) {\r\n                    const asmstep: BuildStep = {\r\n                        tool: step.result.nexttool,\r\n                        ...step.result\r\n                    }\r\n\r\n                    this.steps.push(asmstep);\r\n                }\r\n\r\n                // process final step?\r\n                if (this.steps.length == 0 && linkstep) {\r\n                    this.steps.push(linkstep);\r\n                    linkstep = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async handleMessage(data: WorkerMessage): Promise<WorkerResult> {\r\n        this.steps = [];\r\n\r\n        // file updates\r\n        if (data.updates) {\r\n            data.updates.forEach((u) => fileStore.putFile(u.path, u.data));\r\n        }\r\n\r\n        // object update\r\n        if (data.setitems) {\r\n            data.setitems.forEach((i) => fileStore.setItem(i.key, i.value));\r\n        }\r\n\r\n        // build steps\r\n        if (data.buildsteps) {\r\n            this.steps.push.apply(this.steps, data.buildsteps);\r\n        }\r\n\r\n        // execute build steps\r\n        if (this.steps.length) {\r\n            const result = await this.executeBuildSteps();\r\n            return result ? result : {unchanged: true};\r\n        }\r\n\r\n        // message not recognized\r\n        console.log(\"Unknown message\", data);\r\n    }\r\n}\r\n\r\nfunction applyDefaultErrorPath(errors: WorkerError[], path: string) {\r\n    if (!path) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < errors.length; i++) {\r\n        const err = errors[i];\r\n        if (!err.path && err.line) {\r\n            err.path = path;\r\n        }\r\n    }\r\n}\r\n", "import {WorkerResult} from \"./defs_build_result\";\nimport {Builder} from \"./Builder\";\nimport {errorResult} from \"./shared_funcs\";\nimport {fsLoaded, loadFilesystem, fileStore} from \"./files\";\nimport {WorkerMessage} from \"./defs_build\";\n\ndeclare function postMessage(msg);\n\nconst TOOL_PRELOADFS = {\n    'sdasz80': 'sdcc',\n    'sdcc': 'sdcc',\n}\n\nconst builder = new Builder();\n\nasync function handleMessage(data: WorkerMessage): Promise<WorkerResult> {\n\n    // preload file system\n    if (data.preload) {\n        let fs = TOOL_PRELOADFS[data.preload];\n\n        if (fs && !fsLoaded[fs]) {\n            loadFilesystem(fs);\n        }\n\n        return;\n    }\n\n    // clear filesystem?\n    if (data.reset) {\n        fileStore.reset();\n        return;\n    }\n\n    return builder.handleMessage(data);\n}\n\nlet lastpromise = null;\nonmessage = async function (e) {\n    await lastpromise; // wait for previous message to complete\n    lastpromise = handleMessage(e.data);\n    const result = await lastpromise;\n    lastpromise = null;\n    if (result) {\n        try {\n            postMessage(result);\n        } catch (e) {\n            console.log(e);\n            postMessage(errorResult(`${e}`));\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
